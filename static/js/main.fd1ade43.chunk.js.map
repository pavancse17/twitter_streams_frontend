{"version":3,"sources":["reducers/index.js","Constants.js","sagas/index.js","serviceWorker.js","components/SearchBox.jsx","actions/index.js","components/Tweet.jsx","components/TweetsList.jsx","App.jsx","index.js"],"names":["initialState","topHundreadTweets","currentShowingTweets","waitingForStream","reducer","state","action","type","ogList","payload","tweet","concat","slice","newList","length","config","API_URL","triggerTweets","actionWatcher","rootSaga","io","socketIOClient","socket","get","searchItem","response","console","log","takeLatest","all","Boolean","window","location","hostname","match","Search","props","onChangeHandler","event","setState","searchedItem","target","value","onKeyPressHandler","key","dispatch","className","htmlFor","this","onChange","onKeyPress","React","Component","SearchBox","connect","Tweet","src","user","profile_image_url_https","alt","name","href","screen_name","fromNow","created_at","id_str","text","TweetList","SailsIOClient","sails","url","on","onscroll","innerHeight","scrollY","document","body","offsetHeight","pageYOffset","off","removeAllListeners","tweetList","map","id","enter","durationEnter","component","TweetsList","App","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQAAIA,EAAe,CACjBC,kBAAmB,GACnBC,qBAAsB,GACtBC,iBAAkB,MAgCLC,EA7BC,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAChD,OAAQA,EAAOC,MACb,IAAK,iBACH,OAAO,eACFF,EADL,CAEEJ,kBAAmB,GACnBC,qBAAsB,GACtBC,kBAAkB,IAEtB,IAAK,iBACH,IAAIK,EAAS,CAACF,EAAOG,QAAQC,OAAOC,OAClCN,EAAMJ,kBAAkBW,MAAM,EAAG,KAEnC,OAAO,eACFP,EADL,CAEEF,kBAAkB,EAClBF,kBAAmBO,EACnBN,qBAAsBM,EAAOI,MAAM,EAAG,MAE1C,IAAK,mBACH,IAAIC,EAAUR,EAAMJ,kBAAkBW,MACpC,EACAP,EAAMH,qBAAqBY,OAAS,IAEtC,OAAO,eAAKT,EAAZ,CAAmBH,qBAAsBW,IAC3C,QACE,OAAOR,I,yCCxBAU,EARA,CACXC,QAAS,8C,WCGDC,G,WAWAC,G,WAGeC,GAdzB,SAAUF,EAAcX,GAAxB,uEAEE,OADMc,EAAKC,IADb,SAEQD,EAAGE,OAAOC,IAAV,UACDR,EAAOC,QADN,sBAC2BV,EAAOG,QAAQe,YAC9C,MACA,SAAAC,GAEE,OADAC,QAAQC,IAAIF,GACLA,KAPb,uCAWA,SAAUP,IAAV,iEACE,OADF,SACQU,YAAW,iBAAkBX,GADrC,uCAGe,SAAUE,IAAV,iEACb,OADa,SACPU,YAAI,CAACX,MADE,uCCNKY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kDCdAC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,gBAAkB,SAAAC,GAChB,EAAKC,SAAS,CAAEC,aAAcF,EAAMG,OAAOC,SAR1B,EAWnBC,kBAAoB,SAAAL,GACA,UAAdA,EAAMM,KACR,EAAKR,MAAMS,SCjBR,CACLtC,KAAM,iBACNE,QAAS,CAAEe,WDeyB,EAAKnB,MAAMmC,iBAX/C,EAAKnC,MAAQ,CACXmC,aAAc,IAHC,E,qDAkBjB,OACE,yBAAKM,UAAU,QACb,2BAAOC,QAAQ,SAASD,UAAU,2BAAlC,UAGA,2BACEvC,KAAK,SACLmC,MAAOM,KAAK3C,MAAMmC,aAClBM,UAAU,iCACVG,SAAUD,KAAKX,gBACfa,WAAYF,KAAKL,yB,GA7BNQ,IAAMC,WAmCrBC,EAAYC,aAAQ,SAAAjD,MAARiD,CAAqBnB,G,mDEpCvC,SAASoB,EAAMnB,GACb,IAAI1B,EAAQ0B,EAAM1B,MAClB,OACE,yBAAKoC,UAAU,wDACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,uBACb,yBACEU,IAAK9C,EAAM+C,KAAKC,wBAChBC,IAAI,UACJb,UAAU,uBAId,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,QAAQpC,EAAM+C,KAAKG,MAChC,yBAAKd,UAAU,iBACb,uBAAGe,KAAI,8BAAyBnD,EAAM+C,KAAKK,cAA3C,IACIpD,EAAM+C,KAAKK,aAEf,0BAAMhB,UAAU,QAAhB,KACA,kBAAC,IAAD,CAAQiB,SAAO,GAAErD,EAAMsD,cAG3B,uBACElB,UAAU,qBACVe,KAAI,8BAAyBnD,EAAM+C,KAAKK,YAApC,mBAA0DpD,EAAMuD,SAFtE,SAMF,yBAAKnB,UAAU,QAAQpC,EAAMwD,S,IC1BjCC,E,kLACiB,IAAD,OACZ/C,EAAKgD,IAAc/C,KACzBD,EAAGiD,MAAMC,IAAMvD,EAAOC,QACtBI,EAAGE,OAAOiD,GAAG,WAAW,WACtBnD,EAAGE,OAAOiD,GAAG,UAAU,SAAA7D,GACrB,EAAK0B,MAAMS,SAAS,CAAEtC,KAAM,iBAAkBE,QAAS,CAAEC,iBAG7DqB,OAAOyC,SAAW,WACZzC,OAAO0C,YAAc1C,OAAO2C,SAAWC,SAASC,KAAKC,cAErD,EAAKzC,MAAMlC,qBAAqBY,QAAU,IAC1C,EAAKsB,MAAMlC,qBAAqBY,SAC9B,EAAKsB,MAAMnC,kBAAkBa,QAE/B,EAAKsB,MAAMS,SAAS,CAAEtC,KAAM,qBAIL,IAAvBwB,OAAO+C,aACT1D,EAAGE,OAAOiD,GAAG,UAAU,SAAA7D,GACrB,EAAK0B,MAAMS,SAAS,CAAEtC,KAAM,iBAAkBE,QAAS,CAAEC,cAIlC,IAAvBqB,OAAO+C,cACT1D,EAAGE,OAAOyD,IAAI,UACd3D,EAAGE,OAAO0D,mBAAmB,YAGjC5D,EAAGE,OAAOiD,GAAG,cAAc,WACzBnD,EAAGE,OAAOyD,IAAI,UACd3D,EAAGE,OAAO0D,mBAAmB,e,+BAK/B,IAAIC,EAYJ,OAVEA,EADEjC,KAAKZ,MAAMjC,iBAEX,uBAAG2C,UAAU,4BAAb,iCAKUE,KAAKZ,MAAMlC,qBAAqBgF,KAAI,SAAAxE,GAAK,OACnD,kBAAC6C,EAAD,CAAOX,IAAKlC,EAAMyE,GAAIzE,MAAOA,OAI/B,kBAAC,IAAD,CAAS0E,MAAM,SAASC,cAAe,IAAMC,UAAU,OACpDL,O,GApDe9B,IAAMC,WA+D9B,IAAMmC,EAAajC,aALnB,SAAyBjD,GAEvB,MAAO,CAAEH,qBAD6DG,EAA9DH,qBACuBD,kBADuCI,EAAxCJ,kBACoBE,iBADoBE,EAArBF,oBAIhCmD,CAAyBa,GCvD7BqB,MAbf,WACE,OACE,6BACE,yBAAK1C,UAAU,2BACb,kBAACO,EAAD,OAEF,yBAAKP,UAAU,6BACb,kBAACyC,EAAD,SCGFE,EAAiBC,cACjBC,EAAQC,YAAYxF,EAASyF,YAAgBJ,EAAgBK,WACnEL,EAAeM,IAAI5E,GAEnB6E,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFhB,SAASuB,eAAe,SN8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhF,QAAQgF,MAAMA,EAAMC,a","file":"static/js/main.fd1ade43.chunk.js","sourcesContent":["let initialState = {\n  topHundreadTweets: [],\n  currentShowingTweets: [],\n  waitingForStream: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"TRIGGER_TWEETS\":\n      return {\n        ...state,\n        topHundreadTweets: [],\n        currentShowingTweets: [],\n        waitingForStream: true,\n      };\n    case \"TWEET_RECIEVED\":\n      let ogList = [action.payload.tweet].concat(\n        state.topHundreadTweets.slice(0, 99)\n      );\n      return {\n        ...state,\n        waitingForStream: false,\n        topHundreadTweets: ogList,\n        currentShowingTweets: ogList.slice(0, 10),\n      };\n    case \"SHOW_MORE_TWEETS\":\n      let newList = state.topHundreadTweets.slice(\n        0,\n        state.currentShowingTweets.length + 10\n      );\n      return { ...state, currentShowingTweets: newList };\n    default:\n      return state;\n  }\n};\nexport default reducer;\n","const prod = {\n  API_URL: \"https://strawberry-pie-84465.herokuapp.com\",\n};\n\nconst dev = {\n  API_URL: \"http://localhost:1337\",\n};\n\nexport const config = process.env.NODE_ENV === \"development\" ? dev : prod;\n","import { takeLatest, all } from \"redux-saga/effects\";\nimport socketIOClient from \"socket.io-client\";\nimport { config } from \"../Constants\";\n\nfunction* triggerTweets(action) {\n  const io = socketIOClient;\n  yield io.socket.get(\n    `${config.API_URL}/tweets/?q=${action.payload.searchItem}`,\n    null,\n    response => {\n      console.log(response);\n      return response;\n    }\n  );\n}\nfunction* actionWatcher() {\n  yield takeLatest(\"TRIGGER_TWEETS\", triggerTweets);\n}\nexport default function* rootSaga() {\n  yield all([actionWatcher()]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { triggerTweets } from \"../actions\";\nimport { connect } from \"react-redux\";\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchedItem: \"\",\n    };\n  }\n\n  onChangeHandler = event => {\n    this.setState({ searchedItem: event.target.value });\n  };\n\n  onKeyPressHandler = event => {\n    if (event.key === \"Enter\") {\n      this.props.dispatch(triggerTweets(this.state.searchedItem));\n    }\n  };\n\n  render() {\n    return (\n      <div className='py-3'>\n        <label htmlFor='search' className='mr-1 text-lg text-white'>\n          Search\n        </label>\n        <input\n          type='search'\n          value={this.state.searchedItem}\n          className='rounded-sm text-lg font-medium'\n          onChange={this.onChangeHandler}\n          onKeyPress={this.onKeyPressHandler}\n        />\n      </div>\n    );\n  }\n}\nconst SearchBox = connect(state => {})(Search);\nexport { SearchBox };\n","export const triggerTweets = searchItem => {\n  return {\n    type: \"TRIGGER_TWEETS\",\n    payload: { searchItem },\n  };\n};\n","import React from \"react\";\nimport Moment from \"react-moment\";\n\nfunction Tweet(props) {\n  let tweet = props.tweet;\n  return (\n    <div className='bg-gray-200 my-3 hover:bg-indigo-100 rounded-md pd-4'>\n      <div className='flex h-auto'>\n        <div className='object-contain mt-1'>\n          <img\n            src={tweet.user.profile_image_url_https}\n            alt='Profile'\n            className='rounded-full mr-6'\n          />\n        </div>\n\n        <div className='flex flex-col ml-1'>\n          <div className='flex justify-between'>\n            <div className='flex'>\n              <p className='mr-2'>{tweet.user.name}</p>\n              <div className='text-gray-700'>\n                <a href={`https://twitter.com/${tweet.user.screen_name}`}>\n                  @{tweet.user.screen_name}\n                </a>\n                <span className='mx-1'>.</span>\n                <Moment fromNow>{tweet.created_at}</Moment>\n              </div>\n            </div>\n            <a\n              className='text-blue-600 mr-2'\n              href={`https://twitter.com/${tweet.user.screen_name}/status/${tweet.id_str}`}>\n              link\n            </a>\n          </div>\n          <div className=\"mt-3\">{tweet.text}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { Tweet };\n","import React from \"react\";\nimport Animate from \"animate.css-react\";\nimport socketIOClient from \"socket.io-client\";\nimport SailsIOClient from \"sails.io.js\";\nimport { connect } from \"react-redux\";\nimport { Tweet } from \"./Tweet\";\nimport { config } from \"../Constants\";\n\nclass TweetList extends React.Component {\n  componentDidMount() {\n    const io = SailsIOClient(socketIOClient);\n    io.sails.url = config.API_URL;\n    io.socket.on(\"connect\", () => {\n      io.socket.on(\"tweets\", tweet => {\n        this.props.dispatch({ type: \"TWEET_RECIEVED\", payload: { tweet } });\n      });\n    });\n    window.onscroll = () => {\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n        if (\n          this.props.currentShowingTweets.length >= 10 &&\n          this.props.currentShowingTweets.length !==\n            this.props.topHundreadTweets.length\n        ) {\n          this.props.dispatch({ type: \"SHOW_MORE_TWEETS\" });\n        }\n      }\n\n      if (window.pageYOffset === 0) {\n        io.socket.on(\"tweets\", tweet => {\n          this.props.dispatch({ type: \"TWEET_RECIEVED\", payload: { tweet } });\n        });\n      }\n\n      if (window.pageYOffset !== 0) {\n        io.socket.off(\"tweets\");\n        io.socket.removeAllListeners(\"tweets\");\n      }\n    };\n    io.socket.on(\"disconnect\", () => {\n      io.socket.off(\"tweets\");\n      io.socket.removeAllListeners(\"tweets\");\n    });\n  }\n\n  render() {\n    let tweetList;\n    if (this.props.waitingForStream) {\n      tweetList = (\n        <p className='m-16 text-center text-lg'>\n          Waiting for the new tweets...\n        </p>\n      );\n    } else {\n      tweetList = this.props.currentShowingTweets.map(tweet => (\n        <Tweet key={tweet.id} tweet={tweet} />\n      ));\n    }\n    return (\n      <Animate enter='fadeIn' durationEnter={1000} component='div'>\n        {tweetList}\n      </Animate>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { currentShowingTweets, topHundreadTweets, waitingForStream } = state;\n  return { currentShowingTweets, topHundreadTweets, waitingForStream };\n}\n\nconst TweetsList = connect(mapStateToProps)(TweetList);\nexport { TweetsList };\n","import React from \"react\";\nimport { SearchBox } from \"./components/SearchBox\";\nimport { TweetsList } from \"./components/TweetsList\";\nfunction App() {\n  return (\n    <div>\n      <div className='text-center bg-blue-600'>\n        <SearchBox />\n      </div>\n      <div className='mx-auto lg:w-1/2 md:w-2/3'>\n        <TweetsList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { logger } from \"redux-logger\";\nimport reducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/tailwind.css\";\nimport \"animate.css/animate.css\";\nimport App from \"./App.jsx\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware, logger));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot) {\n  module.hot.accept(App);\n}\n"],"sourceRoot":""}